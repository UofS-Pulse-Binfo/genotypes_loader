<?php

/**
 * Implements hook_enable().
 */
function genotypes_loader_enable() {

  // Determine the PostgreSQL version.
  $pg_version = genotypes_loader_recheck_postgresql_version();

  drupal_set_message(t('Your postgresql version is: %curr', array('%curr' => $pg_version)));

  // If not using PostgreSQL 9.3+, give an error
  if (is_numeric($pg_version)) {
    if (version_compare($pg_version, '9.3', '<')) {
      drupal_set_message(t('This module requires PostgreSQL 9.3 or higher.'), 'error');

      tripal_report_error(
        'genotypes_loader',
        TRIPAL_ERROR,
        'Incompatible postgresql version detected. You are using :curr and this module requires at least 9.3.',
        array( ':curr' => $pg_version )
      );
    }
  } else {
    drupal_set_message(t('Could not determine current version of PostgreSQL. This module requires 9.3 or higher.'), 'error');

    tripal_report_error(
      'genotypes_loader',
      TRIPAL_ERROR,
      'Unable to determine postgresql version. You are using :curr and this module requires at least 9.3.',
      array( ':curr' => $pg_version )
    );
  }


  // Add required terms for loader.
  // -------------------------------
  // stock is of type genomic_DNA.
  // Used for the samples directly associated with the genotypes.
  // No need to insert since it's from the sequence ontology.

  // [genomic DNA] is_extracted_from [germplasm].
  // Used to relate the sample with genotypes to the original material it was extracted from.
  if (!chado_get_cvterm(['cv_id' => ['name' => 'stock_relationship'], 'name' => 'is_extracted_from'])) {

    chado_insert_cvterm([
      'id' => 'local:is_extracted_from',
      'name' => 'is_extracted_from',
      'cv_name' => 'stock_relationship',
      'definition' => 'Describes the relationship between a DNA extraction and the plant and/or animal it was extracted from..'
    ]);
  }
  // [genetic_marker] is_marker_of [variant].
  // Used to relate the genetic marker and variant.
  if (!chado_get_cvterm(['cv_id' => ['name' => 'stock_relationship'], 'name' => 'is_marker_of'])) {

    chado_insert_cvterm([
      'id' => 'local:is_marker_of',
      'name' => 'is_marker_of',
      'cv_name' => 'feature_relationship',
      'definition' => 'Describes the relationship between a variant (position in the genome showing variation) and a genetic marker assaying that variant.'
    ]);
  }
  // [genetic marker]/[variant] free-text type is schema:additionalType
  // This is used for a secondary type for markers (e.g. KASP) and variants (e.g. SNP).
  // No need to insert it since it's used heavily throughout Tripal.

  drupal_set_message('Please configure the terms used for loading genotype data at Admin > Tripal > Extensions > Genotype Loader.', 'warning');

}

/**
 * Implements hook_install().
 */
function genotypes_loader_install() {

  // Determine the PostgreSQL version.
  $pg_version = genotypes_loader_recheck_postgresql_version();

  // If not using PostgreSQL 9.3+, give an error
  if (is_numeric($pg_version)) {
    if ($pg_version < 9.3) {
      drupal_set_message(t('This module requires PostgreSQL 9.3 or higher.'), 'error');

      tripal_report_error(
        'genotypes_loader',
        TRIPAL_ERROR,
        'Incompatible postgresql version detected. You are using :curr and this module requires at least 9.3.',
        array( ':curr' => $pg_version )
      );
    }
  } else {
    drupal_set_message(t('Could not determine current version of PostgreSQL. This module requires 9.3 or higher.'), 'error');

    tripal_report_error(
      'genotypes_loader',
      TRIPAL_ERROR,
      'Incompatible postgresql version detected. You are using :curr and this module requires at least 9.3.',
      array( ':curr' => $pg_version )
    );
  }

  // Create the genotype_call table for storing genotypes in chado.
  chado_create_custom_table(
    'genotype_call',
    genotypes_loader_genotype_call_schema_template(),
    TRUE, NULL, FALSE
  );

}

/**
 * The schema for the custom genotype_call table.
 */
function genotypes_loader_genotype_call_schema_template() {

  $version = variable_get('pgsql_version', 9.2);

  return array(
    'description' => 'A more compact way to store genotype calls.',
    'fields' => array(
      'genotype_call_id' => array(
        'name' => 'genotype_call_id',
        'title' => 'Call ID',
        'description' => 'The primary key',
        'pgsql_type' => 'bigserial',
        'views_type' => 'int',
      ),
      'variant_id' => array(
        'name' => 'variant_id',
        'title' => 'Variant ID',
        'description' => 'Links to the feature describing the loci with variation.',
        'pgsql_type' => 'bigint',
        'views_type' => 'int',
        'not null' => TRUE,
      ),
      'marker_id' => array(
        'name' => 'marker_id',
        'title' => 'Marker ID',
        'description' => 'Links to the feature describing the marker.',
        'pgsql_type' => 'bigint',
        'views_type' => 'int',
        'not null' => TRUE,
      ),
      'genotype_id' => array(
        'name' => 'genotype_id',
        'title' => 'Genotype ID',
        'description' => 'Links to the allele call.',
        'pgsql_type' => 'bigint',
        'views_type' => 'int',
        'not null' => TRUE,
      ),
      'project_id' => array(
        'name' => 'project_id',
        'title' => 'Project ID',
        'description' => 'Links to the project grouping calls from a single analysis.',
        'pgsql_type' => 'bigint',
        'views_type' => 'int',
        'not null' => TRUE,
      ),
      'stock_id' => array(
        'name' => 'stock_id',
        'title' => 'Stock ID',
        'description' => 'Links to the DNA stock assayed by the marker.',
        'pgsql_type' => 'bigint',
        'views_type' => 'int',
        'not null' => TRUE,
      ),
      'meta_data' => array(
        'name' => 'meta_data',
        'title' => 'Meta data',
        'description' => 'JSON storage of any addition meta-data for the call.',
        'pgsql_type' => ($version >= 9.4) ? 'jsonb' : 'json',
        'views_type' => 'text',
      ),
    ),
    'primary key' => array('genotype_call_id'),
    'unique keys' => array(),
    'foreign keys' => array(
      'feature' => array(
        'table' => 'feature',
        'columns' => array(
          'variant_id' => 'feature_id',
          'marker_id' => 'feature_id'
        ),
      ),
      'genotype' => array(
        'table' => 'genotype',
        'columns' => array(
          'genotype_id' => 'genotype_id'
        ),
      ),
      'project' => array(
        'table' => 'project',
        'columns' => array(
          'project_id' => 'project_id'
        ),
      ),
      'stock' => array(
        'table' => 'stock',
        'columns' => array(
          'stock_id' => 'stock_id'
        ),
      ),
    ),
    'indexes' => array(
      'genotypecall_variant_id' => array('variant_id'),
      'genotypecall_marker_id' => array('marker_id'),
      'genotypecall_project_id' => array('project_id'),
      'genotypecall_stock_id' => array('stock_id'),
    ),
  );
}
