<?php
/**
 * @file
 * A module for loading genotypes from various formats into KnowPulse
 */

require_once('api/genotypes_loader.api.inc');
require_once('includes/genotypes_loader.genotype_matrix.inc');
require_once('includes/genotypes_loader.vcf.inc');
require_once('includes/genotypes_loader.legacy.inc');
require_once('includes/genotypes_loader.admin.inc');

/**
 * Implements hook_menu().
 */
function genotypes_loader_menu() {
  $items = array();

  $items['admin/tripal/extension/genotypes_loader'] = array(
    'title' => 'Genotypes Loader',
    'description' => 'Settings related to the genotypes loader.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('genotypes_loader_admin_settings_form'),
    'access arguments' => array('administer tripal'),
    'file' => 'includes/genotypes_loader.admin.inc',
  );

/* Currently not working
  $items['admin/tripal/extension/genotypes_loader/load'] = array(
    'title' => 'Load',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('genotypes_loader_submit_loading_job_form'),
    'access arguments' => array('administer tripal'),
    'weight' => 3,
    'file' => 'includes/genotypes_loader.form.inc'
  );
*/

  // Add our own autocomplete for cvterms using the tripal function.
  // This ensures compatibility with both Tripal 2/3.
  $items['ajax/genotypes_loader/cvterm/%'] = array(
    'page callback' => 'tripal_autocomplete_cvterm',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * The schema for the custom genotype_call table.
 */
function genotypes_loader_genotype_call_schema_template() {

  return array(
    'description' => 'A more compact way to store genotype calls.',
    'fields' => array(
      'genotype_call_id' => array(
        'pgsql_type' => 'bigserial',
        'views_type' => 'int',
      ),
      'variant_id' => array(
        'description' => 'Links to the feature describing the loci with variation.',
        'pgsql_type' => 'bigint',
        'views_type' => 'int',
        'not null' => TRUE,
      ),
      'marker_id' => array(
        'description' => 'Links to the feature describing the marker.',
        'pgsql_type' => 'bigint',
        'views_type' => 'int',
        'not null' => TRUE,
      ),
      'genotype_id' => array(
        'description' => 'Links to the allele call.',
        'pgsql_type' => 'bigint',
        'views_type' => 'int',
        'not null' => TRUE,
      ),
      'project_id' => array(
        'description' => 'Links to the project grouping calls from a single analysis.',
        'pgsql_type' => 'bigint',
        'views_type' => 'int',
        'not null' => TRUE,
      ),
      'stock_id' => array(
        'description' => 'Links to the DNA stock assayed by the marker.',
        'pgsql_type' => 'bigint',
        'views_type' => 'int',
        'not null' => TRUE,
      ),
      'meta_data' => array(
        'pgsql_type' => 'jsonb',
        'views_type' => 'text',
      ),
    ),
    'primary key' => array('genotype_call_id'),
    'unique keys' => array(),
    'foreign keys' => array(
      'feature' => array(
        'table' => 'feature',
        'columns' => array(
          'variant_id' => 'feature_id',
          'marker_id' => 'feature_id'
        ),
      ),
      'genotype' => array(
        'table' => 'genotype',
        'columns' => array(
          'genotype_id' => 'genotype_id'
        ),
      ),
      'project' => array(
        'table' => 'project',
        'columns' => array(
          'project_id' => 'project_id'
        ),
      ),
      'stock' => array(
        'table' => 'stock',
        'columns' => array(
          'stock_id' => 'stock_id'
        ),
      ),
    ),
    'indexes' => array(
      'genotypecall_variant_id' => array('variant_id'),
      'genotypecall_marker_id' => array('marker_id'),
      'genotypecall_project_id' => array('project_id'),
      'genotypecall_stock_id' => array('stock_id'),
    ),
  );
}
